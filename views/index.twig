{% extends 'layout.twig' %}

{% block body %}
	<div id="vote-wrapper" class="vote-wrapper" style="background-color: #08415c;">
		<h2 id="title"></h2>
		<h3 id="category"></h3>
		<div class="container">
			<div id="choices"></div>
		</div>
	</div>
	<script>
		var isTriviaRunning = false;
		var isRoundRunning = false;
		var client = null;

		var category = 9;
		var currentRound = 0;
		var triviaQuestions = [];
		var users = {};
		var votes = {};
		var choiceOptions = [];
		var correctAnswer = 0;
		var numChoices = 0;

		const categories = {
			9: "General Knowledge",
			10: "Entertainment: Books",
			11: "Entertainment: Film",
			12: "Entertainment: Music",
			13: "Entertainment: Musicals & Theatres",
			14: "Entertainment: Television",
			15: "Entertainment: Video Games",
			16: "Entertainment: Board Games",
			17: "Science & Nature",
			18: "Science: Computers",
			19: "Science: Mathematics",
			20: "Mythology",
			21: "Sports",
			22: "Geography",
			23: "History",
			24: "Politics",
			25: "Art",
			26: "Celebrities",
			27: "Animals",
			28: "Vehicles",
			29: "Entertainment: Comics",
			30: "Science: Gadgets",
			31: "Entertainment: Japanese Anime & Manga",
			32: "Entertainment: Cartoon & Animations",
		};

		function difficultyToPoints( difficulty ) {
			switch( difficulty ) {
				case "easy":
					return 5;
				case "medium":
					return 10;
				case "hard":
					return 15;
			}
			return 0;
		}

		function decodeHTML( encodedStr ) {
			var parser = new DOMParser;
			var dom = parser.parseFromString(
			    '<!doctype html><body>' + encodedStr,
			    'text/html');
			var decodedString = dom.body.textContent;
			return decodedString;
		}

		function startTrivia( numRounds = 5 ) {
			numRounds = Math.min( numRounds, 20 );
			$.ajax({
				url: "https://opentdb.com/api.php?amount=" + numRounds + "&category=" + category + "&type=multiple",
				success: (result) => {
					if( result[ "results" ] ) {
						console.log( "Category:", category );
						triviaQuestions = result[ "results" ];
						console.log( triviaQuestions );
						users = {};
						isTriviaRunning = true;
						currentRound = 0;
						setTriviaRound( currentRound );
					}
					else {
						$("#title").text( "Couldn't start Trivia" );
					}
				}
			});
		}

		function setTriviaRound( round ) {
			if( round < triviaQuestions.length ) {
				currentRound = round;
				var currentQuestion = triviaQuestions[ round ];
				$("#title").html( currentQuestion[ "question" ] );
				$("#category").html( currentQuestion[ "category" ] );
				var choices = currentQuestion[ "incorrect_answers" ];
				choices.push( currentQuestion[ "correct_answer" ] );
				choices.sort( () => .5 - Math.random() );
				correctAnswer = choices.indexOf( currentQuestion[ "correct_answer" ] );
				startRound( choices );
			}
		}

		function startRound( choices = [] ) {
			votes = {};
			isRoundRunning = true;
			if( choices.length > 0 ) {
				choiceOptions = choices;
				numChoices = choices.length;
				$("#choices").empty();
				choices.forEach( (x,i) => {
					$("#choices").append('<h2 style="color: #ffffff;">' + ( i + 1 ) + ': ' + x + ' - <span id="choice-count-' + i + '">0</span></h2>');
				});
			}
			client.action( "#{{ username }}", "Round " + ( currentRound + 1 ) + " (" + difficultyToPoints( triviaQuestions[ currentRound ][ "difficulty" ] ) + " pts) : " + decodeHTML( triviaQuestions[ currentRound ][ "question" ] ) );
			var choicesText = choices.map( (x, i) => "[" + ( i + 1 ) + "] " + decodeHTML( x ) );
			client.action( "#{{ username }}", choicesText.join( " " ) );
			$("#vote-wrapper").show();
		}

		function endRound() {
			// setTimeout( function () {
			// 	$("#vote-wrapper").hide();
			// }, 2000);
			isRoundRunning = false;

			var voteCounts = [];
			for( var i = 0; i < numChoices; i++ ) {
				voteCounts.push( Object.keys( votes ).filter( x => votes[ x ] == i ).length );
			}
			var totalCount = voteCounts.reduce( (a, b) => a + b );
			var max = Math.max.apply( null, voteCounts );
			// voteCounts.forEach( (x, i) => {
			// 	if( x == max ) {
			// 		client.say( "#{{ username }}", "Most voted answer: " + decodeHTML( choiceOptions[ i ] ) + " (" + Math.floor( x / totalCount * 100 ) + "%)" );
			// 	}
			// });
			client.action( "#{{ username }}", "CORRECT ANSWER IS: " + ( correctAnswer + 1 ) + ". " + decodeHTML( choiceOptions[ correctAnswer ] ) );
			Object.keys( votes ).forEach( x => {
				if( votes[ x ] == correctAnswer ) {
					if( !users[ x ] ) {
						users[ x ] = { correct: 0, points: 0 };
					}
					if( users[ x ].correct ) {
						users[ x ].correct++;
						users[ x ].points += difficultyToPoints( triviaQuestions[ currentRound ][ "difficulty" ] );
					}
					else {
						users[ x ].correct = 1;
						users[ x ].points = difficultyToPoints( triviaQuestions[ currentRound ][ "difficulty" ] );
					}
				}
			});

			var leaderboard = Object.keys( users );
			leaderboard.sort( (a, b) => users[ b ].points - users[ a ].points );
			var userPoints = leaderboard.slice( 0, 5 ).map( x => x + " (" + users[ x ].points + ")" ).join( ", " );
			client.say( "#{{ username }}", "Top Pups: " + userPoints );

			if( currentRound < triviaQuestions.length - 1 ) {
				currentRound++;
				setTriviaRound( currentRound );
			}
		}

		function getRandomInt(max) {
		  return Math.floor(Math.random() * Math.floor(max));
		}

		$( document ).ready(function() {
			$("#vote-wrapper").hide();

			var options = {
				options: {
					debug: false
				},
				connection: {
					reconnect: true,
				},
				identity: {
					username: "{{ username }}",
				    password: "{{ oauth }}"
				},
				channels: ["#{{ username }}"]
			};

			client = new tmi.client(options);

			// Connect the client to the server..
			client.connect();

			client.on("chat", function (channel, userstate, message, self) {
				if( userstate[ "username" ] == "{{ username }}" || userstate[ "mod" ] ) {
					if( message == "!categories" ) {
						client.say( "#{{ username }}", "Trivia categories are: " + Object.keys( categories ).map( x => "(" + x + ") " + categories[ x ] ).join( ", " ) );
						return;
					}

					if( message.startsWith( "!trivia" ) ) {
						var triviaParts = message.split( " " );
						if( triviaParts.length > 1 ) {
							if( categories[ triviaParts[ 1 ] ] ) {
								category = triviaParts[ 1 ];
							}
							else {
								category = 9;
							}
						}

						if( isTriviaRunning ) {
							endRound();
						}
						else {
							startTrivia();
						}
						return;
					}
				}

				// Vote must be running and only accept chats and whispers
				if( isRoundRunning && userstate["message-type"] != "action" ) {
					var isVote = false;
					var parts = message.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").split(' ');
					parts.forEach( ( part ) => {
						var choice = parseInt( part.toLowerCase() );
						if( choice - 1 < numChoices ) {
							votes[ userstate[ "username" ] ] = choice - 1;
							isVote = true;
						}
					});

					if( isVote ) {
						var voteCounts = [];
						for( var i = 0; i < numChoices; i++ ) {
							voteCounts.push( Object.keys( votes ).filter( x => votes[ x ] == i ).length );
						}
						var totalCount = voteCounts.reduce( (a, b) => a + b );
						for( var i = 0; i < numChoices; i++ ) {
							$("#choice-count-" + i).text( voteCounts[ i ] + " (" + Math.floor( voteCounts[ i ] / totalCount * 100 ) + "%)" );
						}
					}
				}
				console.log( userstate["display-name"] + ": " + message );
			});
		});
	</script>
{% endblock %}
